%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 169 363 491 672
%%HiResBoundingBox: 169.000000 363.000000 490.500000 671.500000
%ADO_DSC_Encoding: MacOS Roman
%%Title: <FEFF69467567657276312E3264700066000000000000000000000018001C>
%%Creator: Adobe Acrobat 9.5.3
%%For: <FEFF656D696C6E616970616C75740073000000000000000000000018003C>
%%CreationDate: 04/14/2015, 01:49:30 PM
%%CropBox: 26.1663 0 585.8337 792
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 940 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.10"
   xmp:ModifyDate="2015-04-14T13:35:27+02:00"
   xmp:CreateDate="2015-04-14T13:35:27+02:00"
   xmp:CreatorTool="dvips(k) 5.993 Copyright 2013 Radical Eye Software"
   xmpMM:DocumentID="uuid:e571b641-1ab6-11f0-0000-e12024d8656b"
   xmpMM:InstanceID="uuid:e571b641-1ab6-11f0-0000-e12024d8656b"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>
% &end XMP packet& %
[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginSubsetFont: GONAAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GONAAA+CMSY7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY7.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 0 784 275} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 708] def
/OtherBlues [-139 -127] def
/StdHW [49] def
/StdVW [49] def
/StemSnapH [49 69] def
/StemSnapV [49 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OQVPUP+CMSY7 /GONAAA+CMSY7 findfont ct_VMDictPut
%ADOBeginSubsetFont: ZFNBAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ZFNBAA+CMR7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR7.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 -20 545 676} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.0437899 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OQVPUQ+CMR7 /ZFNBAA+CMR7 findfont ct_VMDictPut
%ADOBeginSubsetFont: JLBBAA+CMCSC10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JLBBAA+CMCSC10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMCSC10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 -250 733 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 514 528 666 677 683 705] def
/BlueScale 0.0437899 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/StemSnapV [72 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OQVPUR+CMCSC10 /JLBBAA+CMCSC10 findfont ct_VMDictPut
%ADOBeginSubsetFont: JHABAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JHABAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 -205 1009 705} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OQVPUS+CMR10 /JHABAA+CMR10 findfont ct_VMDictPut
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
26.1663 0 mo
26.1663 792 li
585.834 792 li
585.834 0 li
cp
clp
[.940618 0 0 .940618 26.1663 0 ]ct
gsave
191.8 569.4 mo
487.3 569.4 li
487.3 0 li
191.8 0 li
191.8 569.4 li
clp
.19925 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
191.882 427.605 mo
191.882 424.77 li
191.882 132.275 mo
191.882 135.11 li
200.773 427.605 mo
200.773 424.77 li
200.773 132.275 mo
200.773 135.11 li
205.973 427.605 mo
205.973 424.77 li
205.973 132.275 mo
205.973 135.11 li
209.663 427.605 mo
209.663 424.77 li
209.663 132.275 mo
209.663 135.11 li
212.525 427.605 mo
212.525 424.77 li
212.525 132.275 mo
212.525 135.11 li
214.864 427.605 mo
214.864 424.77 li
214.864 132.275 mo
214.864 135.11 li
216.841 427.605 mo
216.841 424.77 li
216.841 132.275 mo
216.841 135.11 li
218.554 427.605 mo
218.554 424.77 li
218.554 132.275 mo
218.554 135.11 li
220.064 427.605 mo
220.064 424.77 li
220.064 132.275 mo
220.064 135.11 li
221.415 427.605 mo
221.415 424.77 li
221.415 132.275 mo
221.415 135.11 li
230.306 427.605 mo
230.306 424.77 li
230.306 132.275 mo
230.306 135.11 li
235.506 427.605 mo
235.506 424.77 li
235.506 132.275 mo
235.506 135.11 li
239.196 427.605 mo
239.196 424.77 li
239.196 132.275 mo
239.196 135.11 li
242.058 427.605 mo
242.058 424.77 li
242.058 132.275 mo
242.058 135.11 li
244.396 427.605 mo
244.396 424.77 li
244.396 132.275 mo
244.396 135.11 li
246.374 427.605 mo
246.374 424.77 li
246.374 132.275 mo
246.374 135.11 li
248.086 427.605 mo
248.086 424.77 li
248.086 132.275 mo
248.086 135.11 li
249.597 427.605 mo
249.597 424.77 li
249.597 132.275 mo
249.597 135.11 li
250.948 427.605 mo
250.948 424.77 li
250.948 132.275 mo
250.948 135.11 li
259.839 427.605 mo
259.839 424.77 li
259.839 132.275 mo
259.839 135.11 li
265.039 427.605 mo
265.039 424.77 li
265.039 132.275 mo
265.039 135.11 li
268.729 427.605 mo
268.729 424.77 li
268.729 132.275 mo
268.729 135.11 li
271.591 427.605 mo
271.591 424.77 li
271.591 132.275 mo
271.591 135.11 li
273.93 427.605 mo
273.93 424.77 li
273.93 132.275 mo
273.93 135.11 li
275.907 427.605 mo
275.907 424.77 li
275.907 132.275 mo
275.907 135.11 li
277.619 427.605 mo
277.619 424.77 li
277.619 132.275 mo
277.619 135.11 li
279.13 427.605 mo
279.13 424.77 li
279.13 132.275 mo
279.13 135.11 li
280.481 427.605 mo
280.481 424.77 li
280.481 132.275 mo
280.481 135.11 li
289.371 427.605 mo
289.371 424.77 li
289.371 132.275 mo
289.371 135.11 li
294.572 427.605 mo
294.572 424.77 li
294.572 132.275 mo
294.572 135.11 li
298.262 427.605 mo
298.262 424.77 li
298.262 132.275 mo
298.262 135.11 li
301.124 427.605 mo
301.124 424.77 li
301.124 132.275 mo
301.124 135.11 li
303.463 427.605 mo
303.463 424.77 li
303.463 132.275 mo
303.463 135.11 li
305.439 427.605 mo
305.439 424.77 li
305.439 132.275 mo
305.439 135.11 li
307.152 427.605 mo
307.152 424.77 li
307.152 132.275 mo
307.152 135.11 li
308.663 427.605 mo
308.663 424.77 li
308.663 132.275 mo
308.663 135.11 li
310.014 427.605 mo
310.014 424.77 li
310.014 132.275 mo
310.014 135.11 li
318.905 427.605 mo
318.905 424.77 li
318.905 132.275 mo
318.905 135.11 li
324.105 427.605 mo
324.105 424.77 li
324.105 132.275 mo
324.105 135.11 li
327.795 427.605 mo
327.795 424.77 li
327.795 132.275 mo
327.795 135.11 li
330.657 427.605 mo
330.657 424.77 li
330.657 132.275 mo
330.657 135.11 li
332.995 427.605 mo
332.995 424.77 li
332.995 132.275 mo
332.995 135.11 li
334.973 427.605 mo
334.973 424.77 li
334.973 132.275 mo
334.973 135.11 li
336.685 427.605 mo
336.685 424.77 li
336.685 132.275 mo
336.685 135.11 li
338.196 427.605 mo
338.196 424.77 li
338.196 132.275 mo
338.196 135.11 li
339.547 427.605 mo
339.547 424.77 li
339.547 132.275 mo
339.547 135.11 li
348.438 427.605 mo
348.438 424.77 li
348.438 132.275 mo
348.438 135.11 li
353.638 427.605 mo
353.638 424.77 li
353.638 132.275 mo
353.638 135.11 li
357.328 427.605 mo
357.328 424.77 li
357.328 132.275 mo
357.328 135.11 li
360.19 427.605 mo
360.19 424.77 li
360.19 132.275 mo
360.19 135.11 li
362.529 427.605 mo
362.529 424.77 li
362.529 132.275 mo
362.529 135.11 li
364.505 427.605 mo
364.505 424.77 li
364.505 132.275 mo
364.505 135.11 li
366.218 427.605 mo
366.218 424.77 li
366.218 132.275 mo
366.218 135.11 li
367.729 427.605 mo
367.729 424.77 li
367.729 132.275 mo
367.729 135.11 li
369.08 427.605 mo
369.08 424.77 li
369.08 132.275 mo
369.08 135.11 li
377.97 427.605 mo
377.97 424.77 li
377.97 132.275 mo
377.97 135.11 li
383.171 427.605 mo
383.171 424.77 li
383.171 132.275 mo
383.171 135.11 li
386.861 427.605 mo
386.861 424.77 li
386.861 132.275 mo
386.861 135.11 li
389.723 427.605 mo
389.723 424.77 li
389.723 132.275 mo
389.723 135.11 li
392.061 427.605 mo
392.061 424.77 li
392.061 132.275 mo
392.061 135.11 li
394.038 427.605 mo
394.038 424.77 li
394.038 132.275 mo
394.038 135.11 li
395.751 427.605 mo
395.751 424.77 li
395.751 132.275 mo
395.751 135.11 li
397.262 427.605 mo
397.262 424.77 li
397.262 132.275 mo
397.262 135.11 li
398.613 427.605 mo
398.613 424.77 li
398.613 132.275 mo
398.613 135.11 li
407.504 427.605 mo
407.504 424.77 li
407.504 132.275 mo
407.504 135.11 li
412.704 427.605 mo
412.704 424.77 li
412.704 132.275 mo
412.704 135.11 li
416.394 427.605 mo
416.394 424.77 li
416.394 132.275 mo
416.394 135.11 li
419.256 427.605 mo
419.256 424.77 li
419.256 132.275 mo
419.256 135.11 li
421.594 427.605 mo
421.594 424.77 li
421.594 132.275 mo
421.594 135.11 li
423.571 427.605 mo
423.571 424.77 li
423.571 132.275 mo
423.571 135.11 li
425.284 427.605 mo
425.284 424.77 li
425.284 132.275 mo
425.284 135.11 li
426.795 427.605 mo
426.795 424.77 li
426.795 132.275 mo
426.795 135.11 li
428.146 427.605 mo
428.146 424.77 li
428.146 132.275 mo
428.146 135.11 li
437.036 427.605 mo
437.036 424.77 li
437.036 132.275 mo
437.036 135.11 li
442.237 427.605 mo
442.237 424.77 li
442.237 132.275 mo
442.237 135.11 li
445.927 427.605 mo
445.927 424.77 li
445.927 132.275 mo
445.927 135.11 li
448.789 427.605 mo
448.789 424.77 li
448.789 132.275 mo
448.789 135.11 li
451.127 427.605 mo
451.127 424.77 li
451.127 132.275 mo
451.127 135.11 li
453.104 427.605 mo
453.104 424.77 li
453.104 132.275 mo
453.104 135.11 li
454.817 427.605 mo
454.817 424.77 li
454.817 132.275 mo
454.817 135.11 li
456.328 427.605 mo
456.328 424.77 li
456.328 132.275 mo
456.328 135.11 li
457.679 427.605 mo
457.679 424.77 li
457.679 132.275 mo
457.679 135.11 li
466.569 427.605 mo
466.569 424.77 li
466.569 132.275 mo
466.569 135.11 li
471.77 427.605 mo
471.77 424.77 li
471.77 132.275 mo
471.77 135.11 li
475.46 427.605 mo
475.46 424.77 li
475.46 132.275 mo
475.46 135.11 li
478.321 427.605 mo
478.321 424.77 li
478.321 132.275 mo
478.321 135.11 li
480.66 427.605 mo
480.66 424.77 li
480.66 132.275 mo
480.66 135.11 li
482.637 427.605 mo
482.637 424.77 li
482.637 132.275 mo
482.637 135.11 li
484.35 427.605 mo
484.35 424.77 li
484.35 132.275 mo
484.35 135.11 li
485.861 427.605 mo
485.861 424.77 li
485.861 132.275 mo
485.861 135.11 li
487.212 427.605 mo
487.212 424.77 li
487.212 132.275 mo
487.212 135.11 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.5 sep
@
191.882 427.605 mo
191.882 423.353 li
191.882 132.275 mo
191.882 136.527 li
221.415 427.605 mo
221.415 423.353 li
221.415 132.275 mo
221.415 136.527 li
250.948 427.605 mo
250.948 423.353 li
250.948 132.275 mo
250.948 136.527 li
280.481 427.605 mo
280.481 423.353 li
280.481 132.275 mo
280.481 136.527 li
310.014 427.605 mo
310.014 423.353 li
310.014 132.275 mo
310.014 136.527 li
339.547 427.605 mo
339.547 423.353 li
339.547 132.275 mo
339.547 136.527 li
369.08 427.605 mo
369.08 423.353 li
369.08 132.275 mo
369.08 136.527 li
398.613 427.605 mo
398.613 423.353 li
398.613 132.275 mo
398.613 136.527 li
428.146 427.605 mo
428.146 423.353 li
428.146 132.275 mo
428.146 136.527 li
457.679 427.605 mo
457.679 423.353 li
457.679 132.275 mo
457.679 136.527 li
487.212 427.605 mo
487.212 423.353 li
487.212 132.275 mo
487.212 136.527 li
@
grestore
gsave
50.2 427.7 mo
595 427.7 li
595 132.2 li
50.2 132.2 li
50.2 427.7 li
clp
.19925 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
191.882 427.605 mo
194.714 427.605 li
487.212 427.605 mo
484.38 427.605 li
191.882 420.196 mo
194.714 420.196 li
487.212 420.196 mo
484.38 420.196 li
191.882 415.862 mo
194.714 415.862 li
487.212 415.862 mo
484.38 415.862 li
191.882 412.787 mo
194.714 412.787 li
487.212 412.787 mo
484.38 412.787 li
191.882 410.403 mo
194.714 410.403 li
487.212 410.403 mo
484.38 410.403 li
191.882 408.454 mo
194.714 408.454 li
487.212 408.454 mo
484.38 408.454 li
191.882 406.806 mo
194.714 406.806 li
487.212 406.806 mo
484.38 406.806 li
191.882 405.379 mo
194.714 405.379 li
487.212 405.379 mo
484.38 405.379 li
191.882 404.12 mo
194.714 404.12 li
487.212 404.12 mo
484.38 404.12 li
191.882 402.994 mo
194.714 402.994 li
487.212 402.994 mo
484.38 402.994 li
191.882 395.586 mo
194.714 395.586 li
487.212 395.586 mo
484.38 395.586 li
191.882 391.252 mo
194.714 391.252 li
487.212 391.252 mo
484.38 391.252 li
191.882 388.177 mo
194.714 388.177 li
487.212 388.177 mo
484.38 388.177 li
191.882 385.792 mo
194.714 385.792 li
487.212 385.792 mo
484.38 385.792 li
191.882 383.843 mo
194.714 383.843 li
487.212 383.843 mo
484.38 383.843 li
191.882 382.196 mo
194.714 382.196 li
487.212 382.196 mo
484.38 382.196 li
191.882 380.768 mo
194.714 380.768 li
487.212 380.768 mo
484.38 380.768 li
191.882 379.509 mo
194.714 379.509 li
487.212 379.509 mo
484.38 379.509 li
191.882 378.383 mo
194.714 378.383 li
487.212 378.383 mo
484.38 378.383 li
191.882 370.975 mo
194.714 370.975 li
487.212 370.975 mo
484.38 370.975 li
191.882 366.641 mo
194.714 366.641 li
487.212 366.641 mo
484.38 366.641 li
191.882 363.566 mo
194.714 363.566 li
487.212 363.566 mo
484.38 363.566 li
191.882 361.181 mo
194.714 361.181 li
487.212 361.181 mo
484.38 361.181 li
191.882 359.232 mo
194.714 359.232 li
487.212 359.232 mo
484.38 359.232 li
191.882 357.585 mo
194.714 357.585 li
487.212 357.585 mo
484.38 357.585 li
191.882 356.157 mo
194.714 356.157 li
487.212 356.157 mo
484.38 356.157 li
191.882 354.899 mo
194.714 354.899 li
487.212 354.899 mo
484.38 354.899 li
191.882 353.773 mo
194.714 353.773 li
487.212 353.773 mo
484.38 353.773 li
191.882 346.364 mo
194.714 346.364 li
487.212 346.364 mo
484.38 346.364 li
191.882 342.03 mo
194.714 342.03 li
487.212 342.03 mo
484.38 342.03 li
191.882 338.955 mo
194.714 338.955 li
487.212 338.955 mo
484.38 338.955 li
191.882 336.57 mo
194.714 336.57 li
487.212 336.57 mo
484.38 336.57 li
191.882 334.621 mo
194.714 334.621 li
487.212 334.621 mo
484.38 334.621 li
191.882 332.974 mo
194.714 332.974 li
487.212 332.974 mo
484.38 332.974 li
191.882 331.547 mo
194.714 331.547 li
487.212 331.547 mo
484.38 331.547 li
191.882 330.288 mo
194.714 330.288 li
487.212 330.288 mo
484.38 330.288 li
191.882 329.162 mo
194.714 329.162 li
487.212 329.162 mo
484.38 329.162 li
191.882 321.753 mo
194.714 321.753 li
487.212 321.753 mo
484.38 321.753 li
191.882 317.42 mo
194.714 317.42 li
487.212 317.42 mo
484.38 317.42 li
191.882 314.345 mo
194.714 314.345 li
487.212 314.345 mo
484.38 314.345 li
191.882 311.959 mo
194.714 311.959 li
487.212 311.959 mo
484.38 311.959 li
191.882 310.011 mo
194.714 310.011 li
487.212 310.011 mo
484.38 310.011 li
191.882 308.363 mo
194.714 308.363 li
487.212 308.363 mo
484.38 308.363 li
191.882 306.936 mo
194.714 306.936 li
487.212 306.936 mo
484.38 306.936 li
191.882 305.677 mo
194.714 305.677 li
487.212 305.677 mo
484.38 305.677 li
191.882 304.551 mo
194.714 304.551 li
487.212 304.551 mo
484.38 304.551 li
191.882 297.142 mo
194.714 297.142 li
487.212 297.142 mo
484.38 297.142 li
191.882 292.809 mo
194.714 292.809 li
487.212 292.809 mo
484.38 292.809 li
191.882 289.734 mo
194.714 289.734 li
487.212 289.734 mo
484.38 289.734 li
191.882 287.349 mo
194.714 287.349 li
487.212 287.349 mo
484.38 287.349 li
191.882 285.4 mo
194.714 285.4 li
487.212 285.4 mo
484.38 285.4 li
191.882 283.752 mo
194.714 283.752 li
487.212 283.752 mo
484.38 283.752 li
191.882 282.325 mo
194.714 282.325 li
487.212 282.325 mo
484.38 282.325 li
191.882 281.066 mo
194.714 281.066 li
487.212 281.066 mo
484.38 281.066 li
191.882 279.94 mo
194.714 279.94 li
487.212 279.94 mo
484.38 279.94 li
191.882 272.532 mo
194.714 272.532 li
487.212 272.532 mo
484.38 272.532 li
191.882 268.198 mo
194.714 268.198 li
487.212 268.198 mo
484.38 268.198 li
191.882 265.123 mo
194.714 265.123 li
487.212 265.123 mo
484.38 265.123 li
191.882 262.738 mo
194.714 262.738 li
487.212 262.738 mo
484.38 262.738 li
191.882 260.789 mo
194.714 260.789 li
487.212 260.789 mo
484.38 260.789 li
191.882 259.142 mo
194.714 259.142 li
487.212 259.142 mo
484.38 259.142 li
191.882 257.714 mo
194.714 257.714 li
487.212 257.714 mo
484.38 257.714 li
191.882 256.455 mo
194.714 256.455 li
487.212 256.455 mo
484.38 256.455 li
191.882 255.329 mo
194.714 255.329 li
487.212 255.329 mo
484.38 255.329 li
191.882 247.921 mo
194.714 247.921 li
487.212 247.921 mo
484.38 247.921 li
191.882 243.587 mo
194.714 243.587 li
487.212 243.587 mo
484.38 243.587 li
191.882 240.512 mo
194.714 240.512 li
487.212 240.512 mo
484.38 240.512 li
191.882 238.127 mo
194.714 238.127 li
487.212 238.127 mo
484.38 238.127 li
191.882 236.179 mo
194.714 236.179 li
487.212 236.179 mo
484.38 236.179 li
191.882 234.531 mo
194.714 234.531 li
487.212 234.531 mo
484.38 234.531 li
191.882 233.104 mo
194.714 233.104 li
487.212 233.104 mo
484.38 233.104 li
191.882 231.845 mo
194.714 231.845 li
487.212 231.845 mo
484.38 231.845 li
191.882 230.719 mo
194.714 230.719 li
487.212 230.719 mo
484.38 230.719 li
191.882 223.31 mo
194.714 223.31 li
487.212 223.31 mo
484.38 223.31 li
191.882 218.976 mo
194.714 218.976 li
487.212 218.976 mo
484.38 218.976 li
191.882 215.902 mo
194.714 215.902 li
487.212 215.902 mo
484.38 215.902 li
191.882 213.516 mo
194.714 213.516 li
487.212 213.516 mo
484.38 213.516 li
191.882 211.568 mo
194.714 211.568 li
487.212 211.568 mo
484.38 211.568 li
191.882 209.92 mo
194.714 209.92 li
487.212 209.92 mo
484.38 209.92 li
191.882 208.493 mo
194.714 208.493 li
487.212 208.493 mo
484.38 208.493 li
191.882 207.234 mo
194.714 207.234 li
487.212 207.234 mo
484.38 207.234 li
191.882 206.108 mo
194.714 206.108 li
487.212 206.108 mo
484.38 206.108 li
191.882 198.699 mo
194.714 198.699 li
487.212 198.699 mo
484.38 198.699 li
191.882 194.365 mo
194.714 194.365 li
487.212 194.365 mo
484.38 194.365 li
191.882 191.291 mo
194.714 191.291 li
487.212 191.291 mo
484.38 191.291 li
191.882 188.905 mo
194.714 188.905 li
487.212 188.905 mo
484.38 188.905 li
191.882 186.957 mo
194.714 186.957 li
487.212 186.957 mo
484.38 186.957 li
191.882 185.309 mo
194.714 185.309 li
487.212 185.309 mo
484.38 185.309 li
191.882 183.882 mo
194.714 183.882 li
487.212 183.882 mo
484.38 183.882 li
191.882 182.623 mo
194.714 182.623 li
487.212 182.623 mo
484.38 182.623 li
191.882 181.497 mo
194.714 181.497 li
487.212 181.497 mo
484.38 181.497 li
191.882 174.088 mo
194.714 174.088 li
487.212 174.088 mo
484.38 174.088 li
191.882 169.755 mo
194.714 169.755 li
487.212 169.755 mo
484.38 169.755 li
191.882 166.68 mo
194.714 166.68 li
487.212 166.68 mo
484.38 166.68 li
191.882 164.295 mo
194.714 164.295 li
487.212 164.295 mo
484.38 164.295 li
191.882 162.346 mo
194.714 162.346 li
487.212 162.346 mo
484.38 162.346 li
191.882 160.698 mo
194.714 160.698 li
487.212 160.698 mo
484.38 160.698 li
191.882 159.271 mo
194.714 159.271 li
487.212 159.271 mo
484.38 159.271 li
191.882 158.012 mo
194.714 158.012 li
487.212 158.012 mo
484.38 158.012 li
191.882 156.886 mo
194.714 156.886 li
487.212 156.886 mo
484.38 156.886 li
191.882 149.478 mo
194.714 149.478 li
487.212 149.478 mo
484.38 149.478 li
191.882 145.144 mo
194.714 145.144 li
487.212 145.144 mo
484.38 145.144 li
191.882 142.069 mo
194.714 142.069 li
487.212 142.069 mo
484.38 142.069 li
191.882 139.684 mo
194.714 139.684 li
487.212 139.684 mo
484.38 139.684 li
191.882 137.735 mo
194.714 137.735 li
487.212 137.735 mo
484.38 137.735 li
191.882 136.088 mo
194.714 136.088 li
487.212 136.088 mo
484.38 136.088 li
191.882 134.661 mo
194.714 134.661 li
487.212 134.661 mo
484.38 134.661 li
191.882 133.402 mo
194.714 133.402 li
487.212 133.402 mo
484.38 133.402 li
191.882 132.275 mo
194.714 132.275 li
487.212 132.275 mo
484.38 132.275 li
false sop
1 /0 /CSD get_res sepcs
.5 sep
@
191.882 427.605 mo
196.13 427.605 li
487.212 427.605 mo
482.964 427.605 li
191.882 402.994 mo
196.13 402.994 li
487.212 402.994 mo
482.964 402.994 li
191.882 378.383 mo
196.13 378.383 li
487.212 378.383 mo
482.964 378.383 li
191.882 353.773 mo
196.13 353.773 li
487.212 353.773 mo
482.964 353.773 li
191.882 329.162 mo
196.13 329.162 li
487.212 329.162 mo
482.964 329.162 li
191.882 304.551 mo
196.13 304.551 li
487.212 304.551 mo
482.964 304.551 li
191.882 279.94 mo
196.13 279.94 li
487.212 279.94 mo
482.964 279.94 li
191.882 255.329 mo
196.13 255.329 li
487.212 255.329 mo
482.964 255.329 li
191.882 230.719 mo
196.13 230.719 li
487.212 230.719 mo
482.964 230.719 li
191.882 206.108 mo
196.13 206.108 li
487.212 206.108 mo
482.964 206.108 li
191.882 181.497 mo
196.13 181.497 li
487.212 181.497 mo
482.964 181.497 li
191.882 156.886 mo
196.13 156.886 li
487.212 156.886 mo
482.964 156.886 li
191.882 132.275 mo
196.13 132.275 li
487.212 132.275 mo
482.964 132.275 li
@
grestore
.3985 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
191.882 427.605 mo
487.212 427.605 li
487.212 132.276 li
191.882 132.276 li
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
25DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668
D97ECF27E58978E82B8932F2635747B0D240AA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 48 /zero put
dup 49 /one put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
181.553 439.234 mo
(10)
[4.97701 0 ]xsh
%ADOBeginSubsetFont: GONAAA+CMSY7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUP+CMSY7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B5822B08BA53C85EBA70EA458D9E59FCB071DA29DC5EA3
F203E8C9DA6EC8D2806B681223A2D7F9FF329F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUP+CMSY7 /Encoding get
dup 33 /minus put
pop
%ADOEndSubsetFont
/OQVPUP+CMSY7*1 
[33{/.notdef}rp /minus 222{/.notdef}rp]
OQVPUP+CMSY7 nf
OQVPUP+CMSY7*1 [6.97385 0 0 -6.97385 0 0 ]msf
191.507 435.616 mo
(!)sh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7E2CE5B2D2AF3C16D655586ADDFD255F342CC78E0CFD77C
BD9B63EF6E836EA2677FC1E3515560DC8E1709808740B3E922280CDDC6B1DE59
498D3F96D52EB7A68A65E121CBB4EE62A5F7C7620A42A7CFE5CDEB9DCEFA2914
61A983E5129317168388213985652593802B6BD46B323DAA41AA2361FFE1897E
F8609C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[50{/.notdef}rp /two 205{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
197.735 435.616 mo
(2)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
211.086 439.234 mo
(10)
[4.97701 0 ]xsh
OQVPUP+CMSY7*1 [6.97385 0 0 -6.97385 0 0 ]msf
221.04 435.616 mo
(!)sh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7E2CE5B62E9FEEC2E64DB4DF57A0DEE8F2DC4BC1D285E2D
6E93583C8BA769F966BA0D2874BA4F6692804A12EE154BF6C4128EE336963B1B
369FC937E51FD440B01114006718C9CD9EDADE925291DDB3291CFBE83284B576
2DA660F3B8EE1736383DFDEEBA0BD582FD6608113CEA73> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
227.268 435.616 mo
(1)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
243.732 439.234 mo
(10)
[4.97701 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7E2CEA7B240FEF602C0A65C384F7D9F85D89DA8B00ED99
C515D758A8E52DC86F382FB688F61317580A66E24517AC4B674C7F287697FD9E
B76D1A8A475F5845B03AF89A501A6DB631BF28FBA18A499E479A1BFC174F26C9
55CA64A7BFA811EED6669B69DDEBB8700FD4E8343040166E083D8F9355C627C9
603D5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
253.686 435.616 mo
(0)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
273.265 439.234 mo
(10)
[4.97699 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
283.219 435.616 mo
(1)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
302.798 439.234 mo
(10)
[4.97699 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
312.752 435.616 mo
(2)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
332.331 439.234 mo
(10)
[4.97699 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7E2CEA7BEEFBD14AB8DF8CEA67D1B763E52ED51307E29
5A37DDE297DA459BE51B49EE11D0E205CF2263FD17827490680BA98FA0C5E982
DDE772750002A75B9868335940F176744F3EB008997ED6790000D7B3BA89101A
3D41944A427F325A6F2C91F15D8728BB9DFE8717AAC3CC1D2144BCEEBD3D3848
BDB42404126DB26B2C13BB479AE38C4F4ECB0DB04BCDC156E6EFA2214C178B5C
435107776FD9AF7FCB46E76B07C5AAB034F8EC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
342.285 435.616 mo
(3)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
361.864 439.234 mo
(10)
[4.97699 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7E2CE5B62E9F191E798679064FF0C3AFF5C2953C7EE99B
35B9593ACD759052F67D5909B21E9F07A93BEECB88B7837B3FCAFA9C9F9D2751
01F3021841B6F1EE365E6D4F866337B858C156F46CCCC54B160345D5344E519C
3C4A92E5896F86E3AEB4D8FF6CA0281FF55EDEA6EC5DCCFBC5C08A0747092056
BF12D043FC4D9F8668B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
371.818 435.616 mo
(4)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
391.397 439.234 mo
(10)
[4.97699 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7E2CEA7BEEF97397CF584C73BBB552ACA7BE761A773032
0D948261D0F09FB4B597AA91855F03701772D3C759AF316165C9BC05703D2F33
CBF3B6D037C80DA58D3E06EB530844281561DE1EAAA05EA7E6E603AE2E808199
D7F7D17F7975F2430BB148C6FCD665E0CC9AEDBF490CAF289909154436D62B38
5B99A24005E5B4B073467835D03C36A9E0434AEAB81CF17668A704C2ABC5CC1B
01E0E48ABB31D966C239418DF38462842A0F3655061F35189B65BEAD3E2DBB0B
10790> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
401.351 435.616 mo
(5)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
420.93 439.234 mo
(10)
[4.97702 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7E2CEA7BEEF982C161B6F1844D3D991CD85BAA17D6BCF4C
629F19CD61ECE57E6A96F375F46BE0F3FD67310743F406B1D8CA08397FA37209
4A02912C5D597F4D7150AD2D5AD23F78723FAF1D1322EBC1CBD4D38A8E675CD4
4F1CCE2571A7F52532CE9F32BAF1F3398E9131635A4C36CD5C145A25946DC0F7
6592EA443B75A100659041A930F02049DE328C90A016451FD00FAE8A2766EFC3
74D01BA42580D01CBA279765DDA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
201{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
430.884 435.616 mo
(6)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
450.463 439.234 mo
(10)
[4.97702 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7E2CEA7B5AC14D2739E53E381628B2C3297CDF1282D21
BC38288187A5A2115AAF3D220A5F1AC7BF6E2698F64B73E3A5AEC8D69C367F8E
33E0F115A00D9ADE41757E443451F347436BC460F5C13BC2BB95EF4D499823DD
2BE671C1F7FA8787897B1AA2016412BC2C70F96D3F7BFEE1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 200{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
460.417 435.616 mo
(7)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
479.996 439.234 mo
(10)
[4.97702 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7E2CEA7BEEF99D35D536A1180AE533AF5C3E9FB6B7182
1F830034763CC284785C0149E38EDF6CA3439CD8CBBD8F4AC2619FD495CAA830
2301BE89D915F5AB5708FF0CBD166E145E7732C90A90901D7B925849ED82279D
40BFF49A4197EE29751072E7D5AC5F135BB4CE855CA9A56F6EC6C21FD59CF875
A74370758C0D8B71C1A03506E0F8E9CA318F67895F128151B66BF2082CEF1E2C
F4FEE9E575DF82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 199{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
489.95 435.616 mo
(8)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
167.704 431.659 mo
(10)
[4.97701 0 ]xsh
OQVPUP+CMSY7*1 [6.97385 0 0 -6.97385 0 0 ]msf
177.658 428.041 mo
(!)sh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.886 428.041 mo
(2)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
167.704 407.048 mo
(10)
[4.97701 0 ]xsh
OQVPUP+CMSY7*1 [6.97385 0 0 -6.97385 0 0 ]msf
177.658 403.43 mo
(!)sh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.886 403.43 mo
(1)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 382.438 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 378.82 mo
(0)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 357.827 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 354.209 mo
(1)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 333.216 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 329.598 mo
(2)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 308.605 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 304.987 mo
(3)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 283.994 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 280.376 mo
(4)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 259.384 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 255.766 mo
(5)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 234.773 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 231.155 mo
(6)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 210.162 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 206.544 mo
(7)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 185.551 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 181.933 mo
(8)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
173.931 160.94 mo
(10)
[4.97701 0 ]xsh
%ADOBeginSubsetFont: ZFNBAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUQ+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7E2CEA7BEEFD730EA9076F2718D9E7AA2E1147EF825005
85CB411990717104CF8E6058C4C52012E50BE61DFEBD62F56B83CA79AFD3E366
16CFBFEB6B5C646312E98C48578082031A04D37CC229C39CDCBD890BDA64DE85
B3595399E88E8481BDA601546D9E7B6120BDAC031B5E501413AD48EEB3891EF3
BA90F6AF44A362B239C60723AED5D995EB925CF8E79A57BB6BE17B949FC49D39
090981A5A65247D99F07AD87FA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUQ+CMR7 /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/OQVPUQ+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
OQVPUQ+CMR7 nf
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
183.885 157.322 mo
(9)sh
OQVPUS+CMR10*1 [9.96264 0 0 -9.96264 0 0 ]msf
169.959 136.33 mo
(10)
[4.97701 0 ]xsh
OQVPUQ+CMR7*1 [6.97385 0 0 -6.97385 0 0 ]msf
179.914 132.712 mo
(10)
[3.96899 0 ]xsh
gsave
191.882 427.605 mo
487.212 427.605 li
487.212 132.276 li
191.882 132.276 li
191.882 427.605 li
clp
297.843 357.007 mo
297.843 345.274 288.333 335.764 276.6 335.764 cv
264.868 335.764 255.357 345.274 255.357 357.007 cv
255.357 368.739 264.868 378.25 276.6 378.25 cv
288.333 378.25 297.843 368.739 297.843 357.007 cv
/1 
[/DeviceCMYK] /CSA add_res
0 .249393 .110658 0 cmyk
f
297.843 357.007 mo
297.644 357.007 li
297.644 351.195 295.289 345.935 291.48 342.127 cv
287.672 338.318 282.412 335.963 276.6 335.963 cv
270.788 335.963 265.529 338.318 261.72 342.127 cv
257.911 345.935 255.556 351.195 255.556 357.007 cv
255.556 362.819 257.911 368.078 261.72 371.887 cv
265.529 375.696 270.788 378.051 276.6 378.051 cv
282.412 378.051 287.672 375.696 291.48 371.887 cv
295.289 368.078 297.644 362.819 297.644 357.007 cv
297.843 357.007 li
298.042 357.007 li
298.042 368.849 288.443 378.449 276.6 378.449 cv
264.758 378.449 255.158 368.849 255.158 357.007 cv
255.158 345.164 264.758 335.565 276.6 335.565 cv
288.443 335.565 298.042 345.164 298.042 357.007 cv
297.843 357.007 li
f
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B6079F1E7C72A986CAA37AA7098C99AF0AF69B4A41FC4A68F1
E13FE7823CB14087D1A03D6BFDE96D0070A345145633BA7CEFA8D419E4B3D53F
3ADD4AFFBF58183F1DBEF117F5DA2182D1339AE0D68A7AE8CA1EE41AF8BD41A3
51EC8A2430F7755B61B26BC5EB1AA644C085DEE637125F5B22BE10C6D86DE87E
0F1819F7C2FBA63DE9C720513FB0A1601F05E184CBD6E137BC266718B83D2495> |-
/b <1C60D8A8C9B790A83D9E7A6001AC854EF8B943E743E91B99DA29586301CD
D5839823233D99B1C577C1F4DFF0EA0F32BC2086F2707A7DD20AF9B67CEAF2A8
142C0184903C062BCDA3F619B0D53D20F97863BA7527C41ABC984D83E7927537
7BA320AFBB48F48B2D10088BC89EBB9C01D05CB682732B7056131A0BF4F223A4
5FB196C15FF8C20088CC8B4C909F5F0D72D1839A24540D889C90DD68E933DDAD
60B1B6BFBEF9B96EA41D08123BC10ECBE3BFA295FF397E499C14DA43850D7296
20> |-
/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDB
F65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD
53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026
EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D867
51973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-
/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF
8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA
61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F
0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4D
A2371542253C2A1E1B028917A1E5> |-
/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADF
B78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CF
F61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D3
2A> |-
/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624A
AEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC67
6C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA8
4C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3
970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF
6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032
D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83
C3181BD7505792D4855E> |-
/r <1C60D8A8C9B734780FC88FD3B21DF573DE0BD8E19ECF409327C58E3627DF
4B64D82C290E296AD12D16F3BDD53C90C5D592551EDF5E8C7E8FE6B97498610F
068FB40EF014C6896F922B40CC34CEEEFE16781389974FD1D8010C3A1B93DA94
23D6C4280D86498AD092998E974DDACA1FA3CA4F3751905AC346A3F69D468219
4D3342733C7CF3000C654F8E9DE159A2316F10B36E49A0996D15FEF4DE5D8433
2102ECD35D818CF4C1F221D14DB48C0FB5BD30A2> |-
/u <1C60D8A8C9B790A8362C570CFB2800E8CBF5A206A67F17BAAE343254C03E
958F83CB5A12ADFA8B4412150589560DDE9B70784A29B02FB60C9645231D13A9
78308E5EE53984B78C9AC2AA2F0EE5269299E66EC0A2F6D2FC9C7C56146B4A2D
450F3E529F72E7D7FD96107695E2148A6B3CC77B93CD510A44599C53106E6043
B1ADA6520148DE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 84 /T put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 114 /r put
dup 117 /u put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 34{/.notdef}rp /T 13{/.notdef}rp /b /c 
/.notdef /e 6{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r 
2{/.notdef}rp /u 138{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
258.429 359.601 mo
(Turbulence)
[4.77225 4.15121 2.92953 4.15121 4.15118 2.0722 3.32101 4.15121 3.32101 0 ]xsh
320.785 335.63 mo
320.785 325.395 312.488 317.098 302.252 317.098 cv
292.017 317.098 283.72 325.395 283.72 335.63 cv
283.72 345.865 292.017 354.162 302.252 354.162 cv
312.488 354.162 320.785 345.865 320.785 335.63 cv
cp
0 .249393 .110658 0 cmyk
f
320.785 335.63 mo
320.785 325.395 312.488 317.098 302.252 317.098 cv
292.017 317.098 283.72 325.395 283.72 335.63 cv
283.72 345.865 292.017 354.162 302.252 354.162 cv
312.488 354.162 320.785 345.865 320.785 335.63 cv
cp
@
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DCB03313BCF7AD8C8EE234E5372D46A65E92A78F4B7E0
2ECC58F71EE6C027AD4D56C5E4DE1AF1031295DC17C0E7AC8D8358634F9A19B0
2A110E5539C10136C68E0D2CBEA6658A501D9D73323861F8C29EB92F9080ACC3
E236C5F14389534682EC2925F59CD4A215569A7BD7B9F7827A30BA75EB840535
B2A2C8F92AD166CE93D277314A4C690C47DB847F73BFE1049631CDDB9124FD76
2753AA8DB187C216ED3005CA929015114EA53826E55872B63FD1FA60DB9883C7
27F137C754792AB823A705DD0DF28293037E1DA5DE4936C6573A1718CA671378
3EC51D8DA977> |-
/h <1C60D8A8C9B790A83D946A52D133532E9DDB252C41638FA043533341FF45
F4E0EEA3BF171DE971DA044D93815FABEAC6A961DE24CD8980B97FCA250A2CD3
DBC1C9175E22BC18E41FEAAE3FDFFC1EC461872FCD8D617F792306109E6C32D9
EEF5544F9D280B7D28E77406A0CD8B488898A862DE88999A354709E3D3907517
0B03FDE60F1E3F7008331FFBCAD1B838829FBE76742914B50EBA96CF0A9BFB36
10334BBAB609B960E9922A4587A5710F25CDF35D8C915B99DCE5DB414BDFAE70
7D88DDA35DD290F04B> |-
/m <1C60D8A8C9B6B41CC7B459B6536767B373D430A0825AAF7F773A561A7086
85F0ADC4DCB9E0E589E1CAAE041E74610D0912668FFE67D85ABFB6E9711A1BAF
6F79493EB629ED4D3069526CA46405DD9F73AD135427553F5CDC8070A373FDB5
F5A7AD8D914FF454B75B35631947B95DC641889F912441897F121AE16882579B
CC53B16D47CA54C4908CBE037FBF67C528547181A184312131D4D65FF7959C28
CA395660C25E9C563755BC71DCFA28B59C3A13B5E81DB9FACCD1252B7053BB33
D50418E59EE521DC7525ADB81394AB30A35828C200015E3FE5BE852ED4AB6ACC
F3B9F483FFA6386BF5C3D4796E775B9756A63267B38CC586E602C79FEC3D829B
D73DEA28076EBF772DD2FA9C3C2744EA327CB7C4D34C562F1F21313655866C2A
7572FC9154DAD1B72C2E50CD60B58A8D1B86850C2CBABDC131A290C26EAFCCE4
803F5EE2ECB4CA746831B1> |-
/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6EC
B30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E8
97F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56
CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C8
47773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC89
18AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1
B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 97 /a put
dup 104 /h put
dup 109 /m put
dup 115 /s put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 34{/.notdef}rp /T 12{/.notdef}rp /a /b 
/c /.notdef /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m 
/n 3{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
286.862 338.225 mo
(Thermals)
[5.39325 4.15118 3.32101 2.92957 6.22342 3.73276 2.0722 0 ]xsh
360.688 314.253 mo
360.688 303.231 351.753 294.296 340.73 294.296 cv
329.708 294.296 320.773 303.231 320.773 314.253 cv
320.773 325.275 329.708 334.211 340.73 334.211 cv
351.753 334.211 360.688 325.275 360.688 314.253 cv
0 .249393 .110658 0 cmyk
f
360.688 314.253 mo
360.489 314.253 li
360.488 308.796 358.277 303.858 354.702 300.282 cv
351.126 296.706 346.187 294.495 340.73 294.495 cv
335.273 294.495 330.335 296.706 326.759 300.282 cv
323.183 303.858 320.972 308.796 320.972 314.253 cv
320.972 319.71 323.183 324.648 326.759 328.224 cv
330.335 331.8 335.273 334.012 340.73 334.012 cv
346.187 334.012 351.126 331.8 354.702 328.224 cv
358.277 324.648 360.488 319.71 360.489 314.253 cv
360.688 314.253 li
360.887 314.253 li
360.887 325.385 351.863 334.41 340.73 334.41 cv
329.598 334.41 320.574 325.385 320.574 314.253 cv
320.574 303.121 329.598 294.097 340.73 294.097 cv
351.863 294.097 360.887 303.121 360.887 314.253 cv
360.688 314.253 li
f
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515E
B70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D5
5EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F
90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768
FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBA
BF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C183
99A9D9> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 100 /d put
dup 111 /o put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 34{/.notdef}rp /T 12{/.notdef}rp /a /b 
/c /d /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
323.887 316.848 mo
(Tornadoes)
[4.77225 3.73276 2.92957 4.15121 3.73273 4.15121 3.94196 3.32098 0 ]xsh
472.836 239.435 mo
472.836 223.143 459.63 209.937 443.339 209.937 cv
427.047 209.937 413.841 223.143 413.841 239.435 cv
413.841 255.726 427.047 268.933 443.339 268.933 cv
459.63 268.933 472.836 255.726 472.836 239.435 cv
cp
0 .249393 .110658 0 cmyk
f
472.836 239.435 mo
472.836 223.143 459.63 209.937 443.339 209.937 cv
427.047 209.937 413.841 223.143 413.841 239.435 cv
413.841 255.726 427.047 268.933 443.339 268.933 cv
459.63 268.933 472.836 255.726 472.836 239.435 cv
cp
@
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B20DABDE3694037FF5
C7CFF0F66599746818E44A88AE051EAA2ECC64A7F63066296DF5B94E5374A791
01894F634254EBF61BB4676A0F5F95AD513AF7507835F91BBF2F6DB05C191360
2214DC0C07048AC9F398A5400FC635BC3D7BE839FD2C9EAE0EFA08945ECA8DA2
3D80132909A7B4597A38120CAB750515AE457C3E49AB6D8454> |-
/t <1C60D8A8C9B737EC5C828C415A21EF65A8DCE4AB75C4F804FD2F74AAED03
32CF1075799E326C4CB510197DA3A668B8EFF3F2CAC89EFC9F1E24EFCBB6E4F7
D58562BB90C45FF297D6656314FD65E690525FFF895AC8C24B58CDA801> |-
/v <1C60D8A8C9B78C669403575833C8C1B14674B390D764957989B7FCA39046
F88EAC215F3348F64657FA41BBBD2D5465C3FAEC5C4992D77A70D6D0FF5B9FE8
4D58B8A01F974B26A648270BCBC3DA08E1FB6DCB4BD59931217BAC36EE05C15D
6C9332DAEE553F44B623DA84A3E35E45703CEA683F59CB5D7DC58019327FAA46
90D7E0848C4054F367D2C3BF6371C99CA6751F50C10017AA2754321B985E8B60
B10B9F082539BC1A53136644081D5FD9AE168FC766A25A8946C2> |-
/w <1C60D8A8C9B6079F1534F6C9E4A028DF1A3B0F45C5ED9660DAC93A0D8C3F
14212FFFC33A5BF9F9DD1C33FCCFCA8E96FE6463AF5069DBFBDDA36D99F88520
652F25FDAFA9A8FF2873E3FDAD8A56EC3357F44ECB370CA4BFB8352215DEAFC2
2A0DFA018C56F834AADBF74CAA36536863C75BD9D7A1CEF77767FBD18809BFE6
294ECFE5D3634C7FCBBBF987220663EF315339F3D9AF5AA5B0F66F6EA972A5EE
22BB54794478F89EC6375B180C36468ADC7E7CAF0A17CB4A0ECCE19DAEAC46AD
A738E6EE5AB37B1A9CDCACA6A56A4B556E8FC78C8021B1E08F770EC97987838B
DF3A71E528C5695396142E79124F182E83C76D32BCA38AD1CB77748E00880A04
9F1E82A6C5E7A5A7404A74F28E09F8202A196F8E9F69EAA58A4A3555B55F> |-
/y <1C60D8A8C9B78C66EF659E90818F97757EE825CF655AFC48477B2EBD1F44
99DC02D3D00D2C79F15A6A14FA0E2836DE647DF694EA1CBE5D7DC52383058018
A4A5582F22DA6D7CA5C65B837F7ACE7A37D8295111416CC9542C83315A00DCC5
8E29D7A527B2702A3D42A1DF4479D981119205E9B3AA4589ADB8E455F287AEE9
7EF0B05E9F424581B6FBD77BBF4A2F94CB7C67A1D393F0F92A930746CD86812D
0F3B42F48F3482F4A9EA27C315DF77B6F7CF19EE636DE6A48B0C906553399551
18E2A4E2CE041041FB27A226D9B9C797FB178764482B1E4FE17D6316683F2694
7316> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 80 /P put
dup 116 /t put
dup 118 /v put
dup 119 /w put
dup 121 /y put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 30{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp 
/a /b /c /d /e 2{/.notdef}rp /h 3{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
416.792 241.303 mo
(Planetarywaves)
[5.0827 2.07217 3.73276 4.15118 3.32098 2.9025 3.73279 2.92953 6.44629 5.18396 3.52344 3.73276 
3.32098 0 ]xsh
366.382 329.303 mo
362.757 329.303 359.307 328.554 356.179 327.201 cv
359.117 323.699 360.887 319.182 360.887 314.253 cv
360.887 314.253 li
360.887 314.253 li
360.887 311.337 360.268 308.565 359.153 306.063 cv
389.344 306.063 li
389.344 301.146 li
356.044 301.146 li
352.69 297.23 347.859 294.617 342.414 294.166 cv
343.72 290.839 345.698 287.85 348.182 285.366 cv
352.841 280.708 359.274 277.827 366.382 277.827 cv
373.49 277.827 379.923 280.708 384.582 285.366 cv
389.24 290.024 392.121 296.457 392.121 303.565 cv
392.32 303.565 li
392.32 303.565 392.32 303.565 392.32 303.565 cv
392.121 303.565 li
392.121 310.673 389.24 317.106 384.582 321.765 cv
379.923 326.422 373.49 329.303 366.382 329.303 cv
0 .100392 .0439216 0 cmyk
f
355.799 327.034 mo
352.945 325.745 350.368 323.95 348.182 321.765 cv
346.732 320.314 345.454 318.692 344.382 316.93 cv
357.309 316.93 li
357.309 311.663 li
341.944 311.663 li
341.101 309.117 340.644 306.394 340.644 303.565 cv
340.644 300.395 341.217 297.358 342.265 294.554 cv
347.11 294.926 351.464 297.045 354.702 300.282 cv
354.982 300.562 355.253 300.85 355.516 301.146 cv
343.426 301.146 li
343.426 306.063 li
358.716 306.063 li
359.855 308.558 360.489 311.331 360.489 314.253 cv
360.688 314.253 li
360.688 314.253 li
360.489 314.253 li
360.489 319.127 358.724 323.588 355.799 327.034 cv
0 .25098 .109804 0 cmyk
f
356.179 327.201 mo
356.052 327.146 355.925 327.091 355.799 327.034 cv
358.724 323.588 360.489 319.127 360.489 314.253 cv
360.688 314.253 li
360.887 314.253 li
360.887 314.253 li
360.887 319.182 359.117 323.699 356.179 327.201 cv
360.887 314.253 mo
360.688 314.253 li
360.489 314.253 li
360.489 311.331 359.855 308.558 358.716 306.063 cv
359.153 306.063 li
360.268 308.565 360.887 311.337 360.887 314.253 cv
356.044 301.146 mo
355.516 301.146 li
355.253 300.85 354.982 300.562 354.702 300.282 cv
351.464 297.045 347.11 294.926 342.265 294.554 cv
342.314 294.424 342.364 294.295 342.414 294.166 cv
347.859 294.617 352.69 297.23 356.044 301.146 cv
f
gsave
357.309 316.93 mo
344.382 316.93 li
343.381 315.286 342.559 313.521 341.944 311.663 cv
357.309 311.663 li
357.309 316.93 li
clp
341.944 311.663 mo
357.309 311.663 li
357.309 316.93 li
341.944 316.93 li
cp
f
0 .701961 .643137 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
323.887 316.848 mo
(Tornadoes)
[4.77225 3.73276 2.92957 4.15121 3.73273 4.15121 3.94196 3.32098 0 ]xsh
grestore
366.382 329.701 mo
362.657 329.701 359.114 328.922 355.908 327.518 cv
355.954 327.465 355.999 327.413 356.044 327.36 cv
359.212 328.738 362.707 329.502 366.382 329.502 cv
380.707 329.502 392.32 317.89 392.32 303.565 cv
392.32 303.565 li
392.519 303.565 li
392.519 303.565 li
392.519 318 380.817 329.701 366.382 329.701 cv
0 .100392 .0439216 0 cmyk
f
355.527 327.348 mo
350.68 325.132 346.627 321.477 343.916 316.93 cv
344.149 316.93 li
346.849 321.412 350.866 325.011 355.664 327.191 cv
355.619 327.244 355.573 327.296 355.527 327.348 cv
0 .25098 .109804 0 cmyk
f
355.908 327.518 mo
355.78 327.462 355.653 327.405 355.527 327.348 cv
355.573 327.296 355.619 327.244 355.664 327.191 cv
355.79 327.248 355.918 327.305 356.044 327.36 cv
355.999 327.413 355.954 327.465 355.908 327.518 cv
f
392.519 303.565 mo
392.32 303.565 li
392.32 303.565 392.32 303.565 392.32 303.565 cv
392.32 289.24 380.707 277.628 366.382 277.628 cv
355.378 277.628 345.975 284.479 342.206 294.15 cv
342.137 294.145 342.068 294.14 341.998 294.136 cv
345.78 284.36 355.271 277.429 366.382 277.429 cv
380.817 277.429 392.519 289.13 392.519 303.565 cv
0 .100392 .0439216 0 cmyk
f
341.734 311.663 mo
341.524 311.663 li
340.694 309.113 340.246 306.392 340.246 303.565 cv
340.246 300.388 340.813 297.343 341.851 294.527 cv
341.92 294.53 341.989 294.535 342.058 294.539 cv
341.015 297.35 340.445 300.391 340.445 303.565 cv
340.445 306.393 340.897 309.115 341.734 311.663 cv
0 .25098 .109804 0 cmyk
f
342.058 294.539 mo
341.989 294.535 341.92 294.53 341.851 294.527 cv
341.899 294.396 341.948 294.266 341.998 294.136 cv
342.068 294.14 342.137 294.145 342.206 294.15 cv
342.156 294.279 342.107 294.409 342.058 294.539 cv
f
gsave
344.149 316.93 mo
343.916 316.93 li
342.934 315.283 342.128 313.518 341.524 311.663 cv
341.734 311.663 li
342.344 313.52 343.157 315.284 344.149 316.93 cv
clp
341.524 311.663 mo
344.149 311.663 li
344.149 316.93 li
341.524 316.93 li
cp
f
0 .701961 .643137 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
323.887 316.848 mo
(Tornadoes)
[4.77225 3.73276 2.92957 4.15121 3.73273 4.15121 3.94196 3.32098 0 ]xsh
grestore
366.382 329.502 mo
362.707 329.502 359.212 328.738 356.044 327.36 cv
356.089 327.307 356.134 327.254 356.179 327.201 cv
359.307 328.554 362.757 329.303 366.382 329.303 cv
373.49 329.303 379.923 326.422 384.582 321.765 cv
389.24 317.106 392.121 310.673 392.121 303.565 cv
392.32 303.565 li
392.32 317.89 380.707 329.502 366.382 329.502 cv
0 .160431 .0701884 0 cmyk
f
355.664 327.191 mo
350.866 325.011 346.849 321.412 344.149 316.93 cv
344.382 316.93 li
345.454 318.692 346.732 320.314 348.182 321.765 cv
350.368 323.95 352.945 325.745 355.799 327.034 cv
355.754 327.086 355.709 327.139 355.664 327.191 cv
0 .25098 .109804 0 cmyk
f
356.044 327.36 mo
355.918 327.305 355.79 327.248 355.664 327.191 cv
355.709 327.139 355.754 327.086 355.799 327.034 cv
355.925 327.091 356.052 327.146 356.179 327.201 cv
356.134 327.254 356.089 327.307 356.044 327.36 cv
f
392.32 303.565 mo
392.121 303.565 li
392.121 296.457 389.24 290.024 384.582 285.366 cv
379.923 280.708 373.49 277.827 366.382 277.827 cv
359.274 277.827 352.841 280.708 348.182 285.366 cv
345.698 287.85 343.72 290.839 342.414 294.166 cv
342.345 294.16 342.276 294.155 342.206 294.15 cv
345.975 284.479 355.378 277.628 366.382 277.628 cv
380.707 277.628 392.32 289.24 392.32 303.565 cv
392.32 303.565 li
0 .160431 .0701884 0 cmyk
f
341.944 311.663 mo
341.734 311.663 li
340.897 309.115 340.445 306.393 340.445 303.565 cv
340.445 300.391 341.015 297.35 342.058 294.539 cv
342.128 294.544 342.197 294.549 342.265 294.554 cv
341.217 297.358 340.644 300.395 340.644 303.565 cv
340.644 306.394 341.101 309.117 341.944 311.663 cv
0 .25098 .109804 0 cmyk
f
342.265 294.554 mo
342.197 294.549 342.128 294.544 342.058 294.539 cv
342.107 294.409 342.156 294.279 342.206 294.15 cv
342.276 294.155 342.345 294.16 342.414 294.166 cv
342.364 294.295 342.314 294.424 342.265 294.554 cv
f
gsave
344.382 316.93 mo
344.149 316.93 li
343.157 315.284 342.344 313.52 341.734 311.663 cv
341.944 311.663 li
342.559 313.521 343.381 315.286 344.382 316.93 cv
clp
341.734 311.663 mo
344.382 311.663 li
344.382 316.93 li
341.734 316.93 li
cp
f
0 .521569 .431373 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
323.887 316.848 mo
(Tornadoes)
[4.77225 3.73276 2.92957 4.15121 3.73273 4.15121 3.94196 3.32098 0 ]xsh
grestore
gsave
343.175 309.473 mo
396.623 309.473 li
396.623 299.012 li
343.175 299.012 li
343.175 309.473 li
clp
gsave
389.344 306.063 mo
359.153 306.063 li
358.356 304.271 357.304 302.617 356.044 301.146 cv
389.344 301.146 li
389.344 306.063 li
clp
356.044 301.146 mo
389.344 301.146 li
389.344 306.063 li
356.044 306.063 li
cp
0 .100392 .0439216 0 cmyk
f
0 .461238 .426144 0 cmyk
OQVPUS+CMR10*1 [6.97385 0 0 -6.97385 0 0 ]msf
343.175 305.986 mo
(Thunderstorms)
[5.03369 3.67917 3.87445 3.87445 3.87445 3.09961 2.73422 2.75308 2.70901 3.48389 2.73425 5.80853 
0 ]xsh
grestore
gsave
358.716 306.063 mo
343.426 306.063 li
343.426 301.146 li
355.516 301.146 li
356.812 302.608 357.895 304.263 358.716 306.063 cv
clp
343.426 301.146 mo
358.716 301.146 li
358.716 306.063 li
343.426 306.063 li
cp
f
0 .54902 .466667 0 cmyk
OQVPUS+CMR10*1 [6.97385 0 0 -6.97385 0 0 ]msf
343.175 305.986 mo
(Thunderstorms)
[5.03369 3.67917 3.87445 3.87445 3.87445 3.09961 2.73422 2.75308 2.70901 3.48389 2.73425 5.80853 
0 ]xsh
grestore
gsave
359.153 306.063 mo
358.716 306.063 li
357.895 304.263 356.812 302.608 355.516 301.146 cv
356.044 301.146 li
357.304 302.617 358.356 304.271 359.153 306.063 cv
clp
355.516 301.146 mo
359.153 301.146 li
359.153 306.063 li
355.516 306.063 li
cp
f
0 .54902 .466667 0 cmyk
OQVPUS+CMR10*1 [6.97385 0 0 -6.97385 0 0 ]msf
343.175 305.986 mo
(Thunderstorms)
[5.03369 3.67917 3.87445 3.87445 3.87445 3.09961 2.73422 2.75308 2.70901 3.48389 2.73425 5.80853 
0 ]xsh
grestore
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B790A8C3E1550ACC8DA9C9FBD3A5CF2194CD2B8642D81A716B
D00E790683F96881FACDE1F9315D62E9690B60701D527468B87CDFB0F4764C55
97556AE6A1AC77EAC949F9287197658BC350D110E467DE690E505B49A0B78B79
E2357C1B06B49C46DBCFC093C8FD052BE36FB8FD34081A4086AA2F339D541A84
930A281511E0A17B9869F6AA55371F1C0D54B13DC306CE1AA830A9CC533AF6BD
85406DAA830F9B2385417AD4B282844721D0D07F3AC31F2E4FAB062DE1D98E9B
B1ADDC8425AA1837400BB1FE64042CEA44886B96F0827BA19AA957D2008F38EA
9B013399E5BDAC4F2A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 30{/.notdef}rp /P 2{/.notdef}rp /S /T 
12{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h 
3{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s 
/t /u /v /w /.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
200.661 380.936 mo
(Sec)
[4.15118 3.32101 0 ]xsh
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B5BA43AA8567ED4BE2D7FEDF84AA8E4D7C55A5BC42BD34F327
7CCBB834BA74F53382342B0BA2F117A667CBDAF558D8C8C6BB52DFE7A951AC7F
90B65CE73200D87C871483BCDABA867EF53CF58D923A6435A91070A9B8C57E2A
C8D8757C5081292709B14AABF10DF398DAFB85ADC1EBF2FD6188FF6384A9B0EC
88ED9C3C67FD1369FE1E51586F85AE8474F281CA47693B25D9154D6F07941252
F00CFCC0ABAA961F75FE6F08A5C67C2DA703A2BABBD58AEB6A91D6EEBE962740
43928EF3E9FBCB3DB234E95B1AF126B5BCE1E952BBBFAD047E0EA18D4396EBF2
025C72> |-
/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444
C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB
5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B56
17CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4F
B895EE90259DCAEBCEFB9765574F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 77 /M put
dup 105 /i put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 27{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp 
/S /T 12{/.notdef}rp /a /b /c /d /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
199.519 338.182 mo
(Min)
[6.85124 2.07224 0 ]xsh
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6E3FA234780E58B87D2EA5F590A170732E8342AECC9351661
21E62A1070A4510D098032CE86B0487DD79307BBCAC2344B3292DE9A2D8082B8
628F7C6E230EE648567F4904925AA4070E97FCB3EA4C73FA2E3142B18F75EA0E
F5F062D038BAE03BBCF96552C8DD6B5D4B8747E5B552469E1B25986782E0B55D
908AFB4A898DB9902CAE08C84B79FD04167BDD5A9E66D88F539A05377BA988B4
9C7EBFDFA962B967B5AE9DAE2C682A6E00F2705C6A21219B2987EF858D011EED
AA259CB8B502CDC00C7A32E14DD38C7C48E01FF854BF1DF45E706BF71F42F777
A381F06D6C9B4C9EFC6AED73572FAEEB4318476678433B1ED0A51B6532A16AF3
C291E604AD4889551281D976188DBCCE5E87B2250FDAB6DEAB32EBD03994B249
89D9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 72 /H put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 22{/.notdef}rp /H 4{/.notdef}rp /M 2{/.notdef}rp 
/P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
197.848 295.429 mo
(Hour)
[5.60251 3.73274 4.15118 0 ]xsh
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6EEDBC0C41A524F9E758CC382DD66BE427C2A2DF4ADB78D9B
43846F3F8F08E1E597E79AB7612DDDC707AAEC06A2898443CA82FBCA30E55581
0A2E60B2C29C04A656D62CA2D655E98AC514E4B623C13C73CAA3C9CFC7408166
8903A078DE399FE0D6CFE2A29266920A5C524CC4E2D86939049425> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 18{/.notdef}rp /D 3{/.notdef}rp /H 4{/.notdef}rp 
/M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 
/b /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
199.467 262.638 mo
(Day)
[5.71049 3.5235 0 ]xsh
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B505563364AC8BE8AB65E15C6C08AD458A3C49B32AF7A6889C
E67A7C3A7AE930FDF331D78AF6B2774B2E2F9165802F51899041EFBD3924C43E
D76A472FF8E62DD42BB26872119346C8E5FAE87DF4A5B6404CEC1023A1889FE1
14BA5E56D8DAB21B203F5E6D874C0E17030C65A10469C5F86A53A7D1CFDBCD0E
6B94604F94EF6BECF776BD9FD84BFC7AF2D1AA08788921B6CE8FD734B2E9372A
CA3C7D976E4DF8C6EED1CE088EB43DC42B2D6388D9B8E9E4C6FA2D7E84106976
063DE8EEDEDD5065F70DF6158531A23BF77B8F77A74E19614095CB2049840CA4
D0D45F1041ABD9861325F1156E78D91D6A706606395E26954346A8584D3C7D06
B32B91751B6AC28A5309BAC9B774A4A1514E73B9AA13764701722D129040EC> |-
/k <1C60D8A8C9B78C669F28CFA812DED6139D7D856991235AB6C4AFC31BCD27
3487675BD2F1E5E12A90601E8813F546F4A251C2413363ED229861B6D9BB803D
B05AFBD87A0BDB30ECAF79A6D7790B485108229A8E37CE114792148894516FD3
5B349631ABB537005E1976FEB58ECAFBA15317EB352D3CF9CB33300F195FC223
A3F6046CEB2634BEBCF6E3727F7EE5A302BE446437A812155B254724D2537EB0
05F67E4A1C637E1D0B04296D89278AFEA4370D60C606D50CD21C194036AA2B31
38CB3CBC2A27B2F6A619F68A923473FE4640A1DEB3A1DC3C48F4614D31FF09A6
26A640D3780A65E6F12B49D1B402046EDA42CFE7231C1BAE09391B8A756CE69E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 87 /W put
dup 107 /k put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 18{/.notdef}rp /D 3{/.notdef}rp /H 4{/.notdef}rp 
/M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 
9{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h 
/i /.notdef /k /l /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
197.236 242.029 mo
(Week)
[7.06049 3.321 3.32101 0 ]xsh
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
195.265 220.652 mo
(Month)
[6.85124 3.73277 3.94211 2.9025 0 ]xsh
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y <1C60D8A8C9B6E3FA234780EB1A04772A8B53B108631340B41C9BFC2C615A
40AD42F002942BAC7B0D12B6B9F1EB957611B84EED77162F8D26105B776D464E
51FDF08EA8D009344ED9A523CD5C727157F80B1AC049435055589D6C7DE74F7A
2948E9DB70928CB12782F907F927FE20BF8D79150175E8538E10A17F82BFD0CD
E66EB7A785D7F7CA6F609DC46D84D6C10D470F7F49920115E990A81A86F246CB
6BBB4E4C66871B995660D9D4E7BBC7E390D6015C5EDDAEBF8A0791761A2C30C2
407A18419CDC05925ABF244A1DFE7DF1CF1FC4DB890EA6704FF1469347C9B998
274D2DC990E5F0AC9E2C2956F8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 89 /Y put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 18{/.notdef}rp /D 3{/.notdef}rp /H 4{/.notdef}rp 
/M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 
/.notdef /Y 7{/.notdef}rp /a /b /c /d /e 
2{/.notdef}rp /h /i /.notdef /k /l /m /n 
/o 2{/.notdef}rp /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
198.575 188.546 mo
(Year)
[4.98164 3.321 3.73277 0 ]xsh
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
245.967 418.2 mo
(1m)
[3.73274 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
333.777 418.387 mo
(1km1000km)
[3.73276 3.94193 76.5033 3.73276 3.73273 3.73276 3.73276 3.94196 0 ]xsh
250.948 408.972 mo
242.5 408.972 234.854 405.548 229.318 400.013 cv
223.783 394.477 220.359 386.831 220.359 378.383 cv
220.359 369.935 223.783 362.29 229.318 356.754 cv
234.854 351.218 242.5 347.795 250.948 347.794 cv
253.006 347.794 255.017 347.998 256.961 348.385 cv
255.802 351.024 255.158 353.94 255.158 357.007 cv
255.158 365.097 259.639 372.141 266.254 375.793 cv
223.287 375.793 li
223.287 381.06 li
278.66 381.06 li
278.66 378.352 li
279.639 378.258 280.598 378.099 281.534 377.879 cv
281.536 378.046 281.538 378.215 281.538 378.383 cv
281.737 378.383 li
281.737 378.383 li
281.538 378.383 li
281.538 386.831 278.114 394.477 272.578 400.013 cv
267.042 405.548 259.396 408.972 250.948 408.972 cv
.0721569 .0721569 0 0 cmyk
f
278.66 377.951 mo
278.66 375.793 li
267.106 375.793 li
265.106 374.78 263.29 373.457 261.72 371.887 cv
257.911 368.078 255.556 362.819 255.556 357.007 cv
255.556 353.967 256.201 351.077 257.361 348.468 cv
262.046 349.467 266.335 351.54 269.956 354.416 cv
258.698 354.416 li
258.698 359.683 li
275.158 359.683 li
278.985 364.63 281.329 370.78 281.524 377.472 cv
280.592 377.695 279.636 377.856 278.66 377.951 cv
.0705882 .223529 .0666667 0 cmyk
f
278.66 378.352 mo
278.66 377.951 li
279.636 377.856 280.592 377.695 281.524 377.472 cv
281.528 377.607 281.531 377.743 281.534 377.879 cv
280.598 378.099 279.639 378.258 278.66 378.352 cv
267.106 375.793 mo
266.254 375.793 li
259.639 372.141 255.158 365.097 255.158 357.007 cv
255.158 353.94 255.802 351.024 256.961 348.385 cv
257.095 348.412 257.228 348.439 257.361 348.468 cv
256.201 351.077 255.556 353.967 255.556 357.007 cv
255.556 362.819 257.911 368.078 261.72 371.887 cv
263.29 373.457 265.106 374.78 267.106 375.793 cv
f
gsave
275.158 359.683 mo
258.698 359.683 li
258.698 354.416 li
269.956 354.416 li
270.875 355.145 271.75 355.925 272.578 356.754 cv
273.498 357.674 274.36 358.652 275.158 359.683 cv
clp
258.698 354.416 mo
275.158 354.416 li
275.158 359.683 li
258.698 359.683 li
cp
f
.0705882 .670588 .6 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
258.429 359.601 mo
(Turbulence)
[4.77225 4.15121 2.92953 4.15121 4.15118 2.0722 3.32101 4.15121 3.32101 0 ]xsh
grestore
250.948 409.37 mo
233.834 409.37 219.961 395.497 219.961 378.383 cv
219.961 361.269 233.834 347.396 250.948 347.396 cv
253.065 347.396 255.132 347.608 257.13 348.013 cv
257.101 348.075 257.073 348.136 257.045 348.198 cv
255.074 347.803 253.035 347.595 250.948 347.595 cv
233.944 347.595 220.16 361.379 220.16 378.383 cv
220.16 395.387 233.944 409.171 250.948 409.171 cv
267.952 409.171 281.737 395.387 281.737 378.383 cv
281.737 378.383 li
281.936 378.383 li
281.936 378.383 li
281.936 395.497 268.062 409.37 250.948 409.37 cv
281.936 378.383 mo
281.737 378.383 li
281.737 378.383 li
281.737 378.198 281.735 378.015 281.732 377.831 cv
281.799 377.815 281.864 377.798 281.931 377.782 cv
281.934 377.981 281.936 378.182 281.936 378.383 cv
.0721569 .0721569 0 0 cmyk
f
281.722 377.423 mo
281.518 370.76 279.198 364.631 275.409 359.683 cv
275.66 359.683 li
279.409 364.63 281.707 370.738 281.92 377.373 cv
281.854 377.39 281.788 377.407 281.722 377.423 cv
270.591 354.416 mo
270.276 354.416 li
266.6 351.448 262.229 349.309 257.445 348.282 cv
257.473 348.219 257.501 348.158 257.53 348.096 cv
262.412 349.152 266.864 351.357 270.591 354.416 cv
.0705882 .223529 .0666667 0 cmyk
f
281.732 377.831 mo
281.73 377.696 281.726 377.558 281.722 377.423 cv
281.788 377.407 281.854 377.39 281.92 377.373 cv
281.924 377.509 281.928 377.644 281.931 377.782 cv
281.864 377.798 281.799 377.815 281.732 377.831 cv
257.445 348.282 mo
257.312 348.253 257.178 348.225 257.045 348.198 cv
257.073 348.136 257.101 348.075 257.13 348.013 cv
257.263 348.04 257.398 348.068 257.53 348.096 cv
257.501 348.158 257.473 348.219 257.445 348.282 cv
f
gsave
275.66 359.683 mo
275.409 359.683 li
273.913 357.729 272.189 355.96 270.276 354.416 cv
270.591 354.416 li
272.479 355.965 274.183 357.735 275.66 359.683 cv
clp
270.276 354.416 mo
275.66 354.416 li
275.66 359.683 li
270.276 359.683 li
cp
f
.0705882 .670588 .6 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
258.429 359.601 mo
(Turbulence)
[4.77225 4.15121 2.92953 4.15121 4.15118 2.0722 3.32101 4.15121 3.32101 0 ]xsh
grestore
250.948 409.171 mo
233.944 409.171 220.16 395.387 220.16 378.383 cv
220.16 361.379 233.944 347.595 250.948 347.595 cv
253.035 347.595 255.074 347.803 257.045 348.198 cv
257.017 348.26 256.989 348.323 256.961 348.385 cv
255.017 347.998 253.006 347.794 250.948 347.794 cv
242.5 347.795 234.854 351.218 229.318 356.754 cv
223.783 362.29 220.359 369.935 220.359 378.383 cv
220.359 386.831 223.783 394.477 229.318 400.013 cv
234.854 405.548 242.5 408.972 250.948 408.972 cv
259.396 408.972 267.042 405.548 272.578 400.013 cv
278.114 394.477 281.538 386.831 281.538 378.383 cv
281.737 378.383 li
281.737 395.387 267.952 409.171 250.948 409.171 cv
281.737 378.383 mo
281.538 378.383 li
281.538 378.215 281.536 378.046 281.534 377.879 cv
281.6 377.863 281.666 377.847 281.732 377.831 cv
281.735 378.015 281.737 378.198 281.737 378.383 cv
281.737 378.383 li
.115309 .115309 0 0 cmyk
f
281.524 377.472 mo
281.329 370.78 278.985 364.63 275.158 359.683 cv
275.409 359.683 li
279.198 364.631 281.518 370.76 281.722 377.423 cv
281.656 377.44 281.59 377.456 281.524 377.472 cv
270.276 354.416 mo
269.956 354.416 li
266.335 351.54 262.046 349.467 257.361 348.468 cv
257.388 348.406 257.416 348.343 257.445 348.282 cv
262.229 349.309 266.6 351.448 270.276 354.416 cv
.113725 .207843 .0392157 0 cmyk
f
281.534 377.879 mo
281.531 377.743 281.528 377.607 281.524 377.472 cv
281.59 377.456 281.656 377.44 281.722 377.423 cv
281.726 377.558 281.73 377.696 281.732 377.831 cv
281.666 377.847 281.6 377.863 281.534 377.879 cv
257.361 348.468 mo
257.228 348.439 257.095 348.412 256.961 348.385 cv
256.989 348.323 257.017 348.26 257.045 348.198 cv
257.178 348.225 257.312 348.253 257.445 348.282 cv
257.416 348.343 257.388 348.406 257.361 348.468 cv
f
gsave
275.409 359.683 mo
275.158 359.683 li
274.36 358.652 273.498 357.674 272.578 356.754 cv
271.75 355.925 270.875 355.145 269.956 354.416 cv
270.276 354.416 li
272.189 355.96 273.913 357.729 275.409 359.683 cv
clp
269.956 354.416 mo
275.409 354.416 li
275.409 359.683 li
269.956 359.683 li
cp
f
.113725 .47451 .360784 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
258.429 359.601 mo
(Turbulence)
[4.77225 4.15121 2.92953 4.15121 4.15118 2.0722 3.32101 4.15121 3.32101 0 ]xsh
grestore
gsave
223.011 384.714 mo
286.42 384.714 li
286.42 373.506 li
223.011 373.506 li
223.011 384.714 li
clp
gsave
278.66 381.06 mo
223.287 381.06 li
223.287 375.793 li
266.254 375.793 li
269.322 377.486 272.848 378.449 276.6 378.449 cv
277.295 378.449 277.982 378.416 278.66 378.352 cv
278.66 381.06 li
clp
223.287 375.793 mo
278.66 375.793 li
278.66 381.06 li
223.287 381.06 li
cp
.0721569 .0721569 0 0 cmyk
f
.42113 .355955 0 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
223.011 380.978 mo
(Microturbulence)
[6.85124 2.07224 3.321 2.92955 6.22366 2.9025 4.15121 2.92955 4.1512 4.15118 2.07224 3.32098 
4.15121 3.32098 0 ]xsh
grestore
gsave
276.6 378.051 mo
273.184 378.051 269.958 377.237 267.106 375.793 cv
278.66 375.793 li
278.66 377.951 li
277.983 378.017 277.295 378.051 276.6 378.051 cv
clp
267.106 375.793 mo
278.66 375.793 li
278.66 378.051 li
267.106 378.051 li
cp
.0705882 .223529 .0666667 0 cmyk
f
.419608 .447059 .0392157 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
223.011 380.978 mo
(Microturbulence)
[6.85124 2.07224 3.321 2.92955 6.22366 2.9025 4.15121 2.92955 4.1512 4.15118 2.07224 3.32098 
4.15121 3.32098 0 ]xsh
grestore
gsave
276.6 378.449 mo
272.848 378.449 269.322 377.486 266.254 375.793 cv
267.106 375.793 li
269.958 377.237 273.184 378.051 276.6 378.051 cv
277.295 378.051 277.983 378.017 278.66 377.951 cv
278.66 378.352 li
277.982 378.416 277.295 378.449 276.6 378.449 cv
clp
266.254 375.793 mo
278.66 375.793 li
278.66 378.449 li
266.254 378.449 li
cp
.0705882 .223529 .0666667 0 cmyk
f
.419608 .447059 .0392157 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
223.011 380.978 mo
(Microturbulence)
[6.85124 2.07224 3.321 2.92955 6.22366 2.9025 4.15121 2.92955 4.1512 4.15118 2.07224 3.32098 
4.15121 3.32098 0 ]xsh
grestore
grestore
459.512 271.5 mo
459.512 267.528 452.271 264.309 443.339 264.309 cv
434.406 264.309 427.165 267.528 427.165 271.5 cv
427.165 275.471 434.406 278.691 443.339 278.691 cv
452.271 278.691 459.512 275.471 459.512 271.5 cv
cp
.181827 .181003 0 0 cmyk
f
459.512 271.5 mo
459.512 267.528 452.271 264.309 443.339 264.309 cv
434.406 264.309 427.165 267.528 427.165 271.5 cv
427.165 275.471 434.406 278.691 443.339 278.691 cv
452.271 278.691 459.512 275.471 459.512 271.5 cv
cp
@
.946258 .780453 0 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
434.393 274.095 mo
(Tides)
[5.39325 2.07217 4.15121 3.32095 0 ]xsh
443.225 185.993 mo
443.225 181.454 426.049 177.775 404.861 177.775 cv
383.672 177.775 366.496 181.454 366.496 185.993 cv
366.496 190.532 383.672 194.212 404.861 194.212 cv
426.049 194.212 443.225 190.532 443.225 185.993 cv
cp
.181827 .181003 0 0 cmyk
f
443.225 185.993 mo
443.225 181.454 426.049 177.775 404.861 177.775 cv
383.672 177.775 366.496 181.454 366.496 185.993 cv
366.496 190.532 383.672 194.212 404.861 194.212 cv
426.049 194.212 443.225 190.532 443.225 185.993 cv
cp
@
.946258 .780453 0 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
380.223 187.861 mo
(Seasonalcycles)
[4.15118 3.32101 3.73276 2.94974 3.73273 4.15121 3.73276 4.56985 3.32098 3.94193 3.32098 2.0722 
3.32098 0 ]xsh
471.357 196.682 mo
471.357 192.71 453.071 189.49 430.513 189.49 cv
407.954 189.49 389.668 192.71 389.668 196.682 cv
389.668 200.653 407.954 203.873 430.513 203.873 cv
453.071 203.873 471.357 200.653 471.357 196.682 cv
cp
.181827 .181003 0 0 cmyk
f
471.357 196.682 mo
471.357 192.71 453.071 189.49 430.513 189.49 cv
407.954 189.49 389.668 192.71 389.668 196.682 cv
389.668 200.653 407.954 203.873 430.513 203.873 cv
453.071 203.873 471.357 200.653 471.357 196.682 cv
cp
@
.946258 .780453 0 0 cmyk
%ADOBeginSubsetFont: JHABAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUS+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079FE0EE62D79560027BBBCB170A7709037203D620100C78
000AFC53792FD4192A63CFDE4C7CCFBBF640912DE1EA497F0D0E9CACF7B55459
0931F67EC30C725B283FF8701F318F6A51E9DAFF6E43D2B77ABC7C9D046D0346
C0BC1B195971779D6643699369A8474D056C5265E53617DA697597540B11F476
0D558D2A79BC5EEE54EC8A8FB0679FBAC9400141E54057CB9E273F1EF671A537
9A4BB4B27EBB1E02C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUS+CMR10 /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
/OQVPUS+CMR10*1 
[48{/.notdef}rp /zero /one 17{/.notdef}rp /C /D 3{/.notdef}rp /H 
4{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W /.notdef /Y 7{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /.notdef /k /l /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
OQVPUS+CMR10 nf
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
404.121 199.276 mo
(Circulationcells)
[5.39325 2.07217 2.9296 3.32098 4.15115 2.0722 3.73279 2.9025 2.07224 3.7327 6.66238 3.32098 
3.32098 2.0722 2.07224 0 ]xsh
492.183 143.24 mo
492.183 139.268 464.573 136.048 430.513 136.048 cv
396.452 136.048 368.842 139.268 368.842 143.24 cv
368.842 147.211 396.452 150.431 430.513 150.431 cv
464.573 150.431 492.183 147.211 492.183 143.24 cv
cp
.181827 .181003 0 0 cmyk
f
492.183 143.24 mo
492.183 139.268 464.573 136.048 430.513 136.048 cv
396.452 136.048 368.842 139.268 368.842 143.24 cv
368.842 147.211 396.452 150.431 430.513 150.431 cv
464.573 150.431 492.183 147.211 492.183 143.24 cv
cp
@
.946258 .780453 0 0 cmyk
OQVPUS+CMR10*1 [7.47198 0 0 -7.47198 0 0 ]msf
389.395 145.834 mo
(Thermohalinecirculation)
[5.39325 4.15118 3.32101 2.92957 6.22345 3.73279 4.15112 3.73279 2.0722 2.07217 4.15121 5.8252 
3.32098 2.07224 2.92953 3.32098 4.15118 2.0722 3.73276 2.9025 2.0722 3.73279 0 ]xsh
grestore
%ADOBeginSubsetFont: JLBBAA+CMCSC10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUR+CMCSC10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B76798EFE98D5BD61BA6673792311C57C554C7BEBE
C510CE4B07DCBAF9F425B6F10039C554FB9D4B9E01EB1A9648246B789CEAC02D
AE3127257E593AFD40F4A5508ECB41617102B98E337742F23FF050CFCAF77576
008E650C3883> |-
/parenright <1C60D8A8C9B76798EFE98D5BD61BA667370F975881A43B3BACA
7E2FBC2FED79645ECC99EF878A783F738AA4322AD4020F80936E7C73F3D33B09
974B01D3C52324322401B5EBC626A0FEF11740640C978B68DCB8C5B6CC314D64
FD9> |-
/S <1C60D8A8C9B7D8BE94170CAF8B7FCA04C11FD53F37E3C9B4DD4E52FE577F
D0D2DAE4720836DB8F0C4C89DA47F5E5EBA4F349EE9F1350A0B683DF21C364C6
BDC129F991EF76384E3D8624F00996835316AAE84921CDD13C2231C6415B31E7
4383EA7203D6D5DA72A57762668740DFF9057C50DAA78B82C534B19894319BE2
608CFDFA58C7CABD379DA2B56B05C7A1B603DBF2F1019BDB1690F8E2D56A9917
AA27C436360187D536C32AD1095B0D2A28C64098A04B69E2664F9A2385967F5B
08C48350F5E799> |-
/a <1C60D8A8C9B7D61BB788A2B0CA3BF7A68E5E3E13BE18F72464BE6C28A798
E82A7BBC194C774D8DBC8E216D33514CE2CCB3B9981358D4FD52B39E2CFFFE4A
B641165A29304E080A10F708DEB4EC653B9B6A8335E0B9D819D82D9CDB4CEA3B
1AD8D476B121E520301E08B1F77FCEC1FF5CCD13A4A073BB96EF9572F5CDFBF0
5E32BC1967801E4805BA0E59A3C992AA5D5D8F1E82EBC753CBF7FF41E5F3FEA8
F5F92F973CE773BD39538C51002B27ADF3532B67447CC26EC81B901E3B98E0DE
8EAA0D3ACFEC> |-
/c <1C60D8A8C9B7CC0B33121D33F45A1388CD943CAC9513F66A976AB30F267B
B3F7238834895602716B5FC61BCAC7061134CCB274319265D0E78CF976624229
297BEBD39FCF09F4821213CD035A1F0B6452463A205FDD31168998ACF231A18E
8C5A341EEF7082BF2357309FBDE25AF06F17079E828A4E61ADE1E9F939545211
A876> |-
/e <1C60D8A8C9B7EE7C65E4472AD3BA8323089DC13C4A568F0F31389DC36FD9
3678511E99F77594D1D9D9A113861B7FBBE42427ECC9CA257A0C412FB471371E
B5F6E46E8BA159B36F3CDE84F3C9BF8896B60FB138A2CF9D9508D5F18352D8CE
579152338B20A8EC358330BD17B7DBA96175A4B686CDEEE6266A8FCB7A4D86> |-
/i <1C60D8A8C9B83C8EDA180CF21D3C2A0A36356B391A7DB491EF3EAEB5BC0A
6E99F093632517D7E38B068BC6AA983D1FAAD4EA20448751AFDC370CAD4FAB76
E073F186B45CD5A83CE6B451ACB8C78F46C447FCA27FB0211CFD0F1E11EA8254
7E2F617EF598AF1EEAD8B0B00FEEEF71AF3312F3E66E1B93446C1078C27AB59E
6BDB8020BF9DA4C9021486864D> |-
/l <1C60D8A8C9B7BA8F693E86C705AFC30725CAE707282F2A8733B258048181
64BBBEF8BFCE8BE88B1777E8D86D194D0809E2E1545744AD8E3DC837BC2FC257
DDE54816A6C37D11368021333401CA95424AF2C5AFF1E3F62682BAFDBB5D3A01
881ACEC0FED5584FC1CB5D09ECFE41E6D4C8DF5D> |-
/m <1C60D8A8C9B61FE1CC00FB321C0FD04053FDE61284AD88B6BCD4201750A5
12B4C9BF139199A268F23FE47E8DF638AF49906F355AFB27C386DDDC3968E4DF
4089B8F438584A931261FCD05B527DDDF38084720649EC50BFDD1F2D364D222D
D0A65FA36432AF4C1EE9BCAC48D7A8476085521678D56E4924E1E6D6246981C3
DE18112BC58B2DD37E5398FCA191271A8B8E24CF47A4FD0A03CF8DDC5A6FCFDE
27539E16CDB88C329ECE943DA068291D06AC06E05C55C22EB2DAA93B3636766D
C6F13E22D6E9A41D3159E2D0D06762BD05F926AA06B797BDE6958B9FC2> |-
/p <1C60D8A8C9B7EE7C65E4472A3CFE425E806A085FA0ED342A97CC8CBB9C15
ACA8BFB72FD38D3F893FA9529A3AF50A3F1552C4B954BF92472603C3C6882BBC
E0FA83F0B71BFEFE3B1E097A03C7C1FE8E946B242DBDB2473BD6E61C7E03FEA7
D54FC85AC0BBA6957761588409FC8C688FCAC092762C76F34D79834B6D63AE2F
946BC7D00D0715AF1E60BF7F3DDD235184> |-
/r <1C60D8A8C9B7C12A21EDBD9CA9A17B54B4BA56616562D0B501C33EB2947F
55A96BAAFFE0E8631586CA903B25FC6AC324880E714D6DF230E151165F28F0A3
C93D0135C566B855CA186FA80E7F281D39219E85A6D0185EEF9CFF4BA93114E1
8047FD1608C58E6681BFAE06E356967C83889740779C3FABDAE03145B1D8A1F5
335544B1CF5E83260E67476B3D3442C085401E94E7F70C69AE5B91B308DA3965
54C26D36046E471EC806AD5E619CDF67E7EA54EE335FB4BF3A76885B85FCB77A
F92EB17B93BD333B367C8EDC74D27D53D6AF0263CECB60BDA49AB03F184DBA99
CB27E93D12581DD957AF513BAC0D6AA8324ECCDCAE68F87157> |-
/s <1C60D8A8C9B77279CADE1829552DB6AB2A0EB4869422E65C497B1D36E20C
0CB5887259F952CA1D478058176D07D84837E3F23F053D7108B4C2754552E431
92414DC1FA5F6DA05C32D0BE3AF931FCE48536EE9C10436140DC82DEE6E4C4EB
96B55DB4381F59CD90244BC4CD854CED8CA678D127006EF02B115730E4249572
5C85ACF880A1A7CBEDBE693A5B08E75F8F71D1826CFF78F46BE5D15FF83CC4B5
20F70393B2C361F3BBE73DB566B2D835A56C7C4321236E61B02866FCD815FDEF
8ED204C682C2B0769CCF52E704407B8C60> |-
/t <1C60D8A8C9B7CC0BC5D49AC1A9E7285ABE5CEA4C68C7AF116485FE6C4A84
14EB0B2F160DB1080F3AFEF8A31046245EB6E0EF55DB2DD258BB20ACAA1C298A
7F7EC7F05E4562CD8451C9AAC6009DD8452FC1D225AD43FE566E5C6628E04674
EBB8078D2CA7AD766CCD509795E9FD1DFD87B3054FE552699D5C989454B0CBDD
1D23> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUR+CMCSC10 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
%ADOEndSubsetFont
/OQVPUR+CMCSC10*1 
[40{/.notdef}rp /parenleft /parenright 41{/.notdef}rp /S 13{/.notdef}rp /a /.notdef 
/c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
2{/.notdef}rp /p /.notdef /r /s /t 139{/.notdef}rp]
OQVPUR+CMCSC10 nf
OQVPUR+CMCSC10*1 [9.96264 0 0 -9.96264 0 0 ]msf
282.046 453.541 mo
(Spatialscale\(meters\))
[6.08392 4.88715 5.44498 5.88605 3.01501 6.11105 8.88293 4.56299 5.88605 6.11105 5.112 9.32416 
4.34705 7.44305 5.55304 5.88605 5.5531 6.00302 4.56302 0 ]xsh
%ADOBeginSubsetFont: JLBBAA+CMCSC10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
OQVPUR+CMCSC10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B6C7695213A528591E1816B37F6372BCCC6C6072788C902C24
C5ABD15BF24485F76BD80632E1F306460A98BFDB26C781A30DCA9F9A5898B175
2F448EFEDFBA903EB27CE64F6A6E6FBE4E738DF5CEC87D89A7E03EB56A62C7AF
B9E7AFD1314C8D622E4749702C98F34220E0755D9CD519492FF7630FCB25E32D
4E31F39A247D96B6F783B71D2626C1E356363F5412> |-
/d <1C60D8A8C9B66553740501667F858F486CD36F77B46D7374DFE93D97A875
EBABD775E6918D038AC7AF082B46D90F54505886CAE56D0B3974479F53D5B3F9
098E2CB016F1F8294C4FD2A0BFC95400F0C8365243AA39D6782AE543D27BFF2F
43A3F90716B6D4B72982CEE71444240FCE60695C> |-
/n <1C60D8A8C9B7D61BB788A2BF7212608250918947F38B836A9D64362BA28B
75A94CB5E9E15C0331293C0FB526B19CD5396FC37322910E3B0F36335BF080DD
ECE410EE60B7D7BA281FF20C9FD9D82E89FCFAF50A61FF9E1F0BE2894ACDBBFE
870DD78BD5A082A09965A825DA9A5809D77109D8268251AECBBC57E1A5C3E595
616D6989F98DF5CAEE7935231EDD629C856D9B3414C0E1097A469DE14B720F55
9947C5FA1629BB687C0D67ECE4F1BFBA4434428F8B2F20D951B5435A0D77B66E> |-
/o <1C60D8A8C9B66EAD82F25D31ED39EE0A7DDFA7B55C7BA2E794400C10A013
0662C5F8E82F7E3D7F9AA253A6C1E60C8AB371A8529C25D3E1507F3E3116763F
3CAFB0B6D440910E7D99072DFBE86753BDCC18E56C6B535FCC9EBEC4384E2728
2FEA483A72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OQVPUR+CMCSC10 /Encoding get
dup 84 /T put
dup 100 /d put
dup 110 /n put
dup 111 /o put
pop
%ADOEndSubsetFont
/OQVPUR+CMCSC10*1 
[40{/.notdef}rp /parenleft /parenright 41{/.notdef}rp /S /T 12{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
139{/.notdef}rp]
OQVPUR+CMCSC10 nf
OQVPUR+CMCSC10*1 [0 -9.96264 -9.96264 0 0 0 ]msf
159.504 346.25 mo
(Temporalscale\(seconds\))
[-7.82996 -5.5531 -7.44299 -5.5531 -6.33594 -6.00311 -6.11108 -8.87408 -4.56299 -5.88599 -6.11115 -5.11194 
-9.32422 -4.34711 -4.56299 -5.55304 -5.88605 -6.33594 -6.11108 -6.21893 -4.56299 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/OQVPUR+CMCSC10*1 uf
/OQVPUR+CMCSC10 uf
/JLBBAA+CMCSC10 uf
/OQVPUQ+CMR7*1 uf
/OQVPUQ+CMR7 uf
/ZFNBAA+CMR7 uf
/OQVPUS+CMR10*1 uf
/OQVPUS+CMR10 uf
/JHABAA+CMR10 uf
/OQVPUP+CMSY7*1 uf
/OQVPUP+CMSY7 uf
/GONAAA+CMSY7 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
